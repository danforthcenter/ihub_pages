# Name of your workflow, visible in the GitHub Actions tab
name: Build Hugo Site and Create Tarball

# Controls when the workflow will run
on:
  # Trigger the workflow on pushes to the 'main' branch
  push:
    branches:
      - main
  # Allow manual triggering from the GitHub Actions tab
  workflow_dispatch:

# Define the jobs to run in this workflow
jobs:
  build_and_archive:
    # The runner environment for this job
    runs-on: ubuntu-latest

    # Steps define the sequence of tasks for this job
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for .GitInfo and .Lastmod in Hugo
          fetch-depth: 0
          # Include submodules if your Hugo theme is a submodule
          submodules: true

      # Step 2: Set up Hugo environment
      # We use peaceiris/actions-hugo for easy Hugo installation
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest' # Or specify a version like '0.126.1'
          # Set to true if you are using Hugo extended features (e.g., Sass)
          extended: true

      # Step 3: Build the Hugo site
      - name: Build Hugo site
        run: |
          # Define the repository name to construct the GitHub Pages base URL
          # This extracts the repository name from GITHUB_REPOSITORY (e.g., 'username/repo-name' -> 'repo-name')
          REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          GITHUB_PAGES_BASEURL="https://${{ github.actor }}.github.io/${REPO_NAME}/"

          # Ensure the public directory is clean before building
          rm -rf public
          # Build the site into the 'public' directory
          # --minify is recommended for production builds
          # --gc cleans up unused cache files
          # --baseURL overrides the base URL for GitHub Pages deployment
          hugo --minify --gc --baseURL "${GITHUB_PAGES_BASEURL}"

      # Step 4: Create a tarball of the static assets
      - name: Create tarball of static assets
        run: |
          # Define the output file name for the tarball
          # Using the current date and commit SHA for uniqueness
          TARBALL_NAME="hugo-site-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}.tar.gz"
          tar -czvf $TARBALL_NAME public/

          # Print the tarball name for easier debugging/tracking
          echo "Tarball created: $TARBALL_NAME"
          echo "TARBALL_NAME=$TARBALL_NAME" >> "$GITHUB_ENV" # Make it available for subsequent steps

      # Step 5: Upload the tarball as a workflow artifact
      # This makes the tarball downloadable from the Actions run summary
      - name: Upload static site tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARBALL_NAME }} # Use the dynamic name from the previous step
          path: ${{ env.TARBALL_NAME }}
          retention-days: 7 # How long to keep the artifact (e.g., 7 days)

  deploy_to_gh_pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_and_archive # This job depends on the build_and_archive job
    permissions:
        pages: write
        id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public' # Upload the public directory for Pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
